// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0
// source: proto_data/GameRes.proto

package res

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 基本信息 (MDM_USER-SUB_USER_REQ__SIT => MDM_GAME-S2C_ENTER_INFO)
type EnterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 协议版号
	ProtoVersion string `protobuf:"bytes,1,opt,name=protoVersion,proto3" json:"protoVersion,omitempty"`
	// 玩家资料
	Self *UserData `protobuf:"bytes,2,opt,name=self,proto3" json:"self,omitempty"` // 暂时放置 EnterRoom，以后会再移走。
	// 玩家登入时间
	UserLoginTime int64 `protobuf:"varint,3,opt,name=userLoginTime,proto3" json:"userLoginTime,omitempty"`
	// 遊戲相關設定
	GameConfigs []*GameConfig `protobuf:"bytes,4,rep,name=gameConfigs,proto3" json:"gameConfigs,omitempty"`
	// 瓦力遊戲清單
	WaligameConfigs []*WaliGameConfig `protobuf:"bytes,5,rep,name=waligameConfigs,proto3" json:"waligameConfigs,omitempty"`
}

func (x *EnterInfo) Reset() {
	*x = EnterInfo{}
	mi := &file_proto_data_GameRes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterInfo) ProtoMessage() {}

func (x *EnterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterInfo.ProtoReflect.Descriptor instead.
func (*EnterInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{0}
}

func (x *EnterInfo) GetProtoVersion() string {
	if x != nil {
		return x.ProtoVersion
	}
	return ""
}

func (x *EnterInfo) GetSelf() *UserData {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *EnterInfo) GetUserLoginTime() int64 {
	if x != nil {
		return x.UserLoginTime
	}
	return 0
}

func (x *EnterInfo) GetGameConfigs() []*GameConfig {
	if x != nil {
		return x.GameConfigs
	}
	return nil
}

func (x *EnterInfo) GetWaligameConfigs() []*WaliGameConfig {
	if x != nil {
		return x.WaligameConfigs
	}
	return nil
}

// 登入后给玩家资料
type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` // 用户id
	Score  int64 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`   // 身上的钱
}

func (x *UserData) Reset() {
	*x = UserData{}
	mi := &file_proto_data_GameRes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{1}
}

func (x *UserData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserData) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type GameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiniGameId     int32            `protobuf:"varint,1,opt,name=miniGameId,proto3" json:"miniGameId,omitempty"`
	BetAreaConfigs []*BetAreaConfig `protobuf:"bytes,2,rep,name=betAreaConfigs,proto3" json:"betAreaConfigs,omitempty"`
}

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	mi := &file_proto_data_GameRes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{2}
}

func (x *GameConfig) GetMiniGameId() int32 {
	if x != nil {
		return x.MiniGameId
	}
	return 0
}

func (x *GameConfig) GetBetAreaConfigs() []*BetAreaConfig {
	if x != nil {
		return x.BetAreaConfigs
	}
	return nil
}

type BetAreaConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode int32     `protobuf:"varint,1,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Odds     []float32 `protobuf:"fixed32,3,rep,packed,name=odds,proto3" json:"odds,omitempty"`
	MinLimit int32     `protobuf:"varint,4,opt,name=minLimit,proto3" json:"minLimit,omitempty"`
	MaxLimit int32     `protobuf:"varint,5,opt,name=maxLimit,proto3" json:"maxLimit,omitempty"`
}

func (x *BetAreaConfig) Reset() {
	*x = BetAreaConfig{}
	mi := &file_proto_data_GameRes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetAreaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetAreaConfig) ProtoMessage() {}

func (x *BetAreaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetAreaConfig.ProtoReflect.Descriptor instead.
func (*BetAreaConfig) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{3}
}

func (x *BetAreaConfig) GetAreaCode() int32 {
	if x != nil {
		return x.AreaCode
	}
	return 0
}

func (x *BetAreaConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BetAreaConfig) GetOdds() []float32 {
	if x != nil {
		return x.Odds
	}
	return nil
}

func (x *BetAreaConfig) GetMinLimit() int32 {
	if x != nil {
		return x.MinLimit
	}
	return 0
}

func (x *BetAreaConfig) GetMaxLimit() int32 {
	if x != nil {
		return x.MaxLimit
	}
	return 0
}

type WaliGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gametype int32  `protobuf:"varint,1,opt,name=gametype,proto3" json:"gametype,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url      string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Icon     string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *WaliGameConfig) Reset() {
	*x = WaliGameConfig{}
	mi := &file_proto_data_GameRes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaliGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaliGameConfig) ProtoMessage() {}

func (x *WaliGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaliGameConfig.ProtoReflect.Descriptor instead.
func (*WaliGameConfig) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{4}
}

func (x *WaliGameConfig) GetGametype() int32 {
	if x != nil {
		return x.Gametype
	}
	return 0
}

func (x *WaliGameConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WaliGameConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WaliGameConfig) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

// 直播间资讯 (MDM_GAME-C2S_ENTER_GROUP => MDM_GAME-S2C_GROUP_INFO)
type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 小游戏资讯
	MiniGameBasicInfoList []*MiniGameBasicInfo `protobuf:"bytes,1,rep,name=miniGameBasicInfoList,proto3" json:"miniGameBasicInfoList,omitempty"` // 僅傳送直播主預設的遊戲
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	mi := &file_proto_data_GameRes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{5}
}

func (x *GroupInfo) GetMiniGameBasicInfoList() []*MiniGameBasicInfo {
	if x != nil {
		return x.MiniGameBasicInfoList
	}
	return nil
}

type MiniGameBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 小游戏 id
	MiniGameId int32 `protobuf:"varint,1,opt,name=miniGameId,proto3" json:"miniGameId,omitempty"`
	// 当前所处阶段：1.下注 2.结算, 3.發牌中
	Stage int32 `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
	// 当前阶段剩余时间倒计时(ms)
	CountDown int32 `protobuf:"varint,3,opt,name=countDown,proto3" json:"countDown,omitempty"`
	// 小游戏名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// 2024.10.22 改到enterminigame info
	//        // 开奖纪录(若进场时为结算阶段, 则包含此局结果)
	//        Trend trend = 5;
	LastRoundInfo *RoundInfo `protobuf:"bytes,6,opt,name=lastRoundInfo,proto3" json:"lastRoundInfo,omitempty"` // 上一局的開獎結果, 服務器剛開時為空
}

func (x *MiniGameBasicInfo) Reset() {
	*x = MiniGameBasicInfo{}
	mi := &file_proto_data_GameRes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiniGameBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniGameBasicInfo) ProtoMessage() {}

func (x *MiniGameBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniGameBasicInfo.ProtoReflect.Descriptor instead.
func (*MiniGameBasicInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{6}
}

func (x *MiniGameBasicInfo) GetMiniGameId() int32 {
	if x != nil {
		return x.MiniGameId
	}
	return 0
}

func (x *MiniGameBasicInfo) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *MiniGameBasicInfo) GetCountDown() int32 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

func (x *MiniGameBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MiniGameBasicInfo) GetLastRoundInfo() *RoundInfo {
	if x != nil {
		return x.LastRoundInfo
	}
	return nil
}

// 开奖历史
type Trend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundInfoList []*RoundInfo `protobuf:"bytes,1,rep,name=roundInfoList,proto3" json:"roundInfoList,omitempty"`
}

func (x *Trend) Reset() {
	*x = Trend{}
	mi := &file_proto_data_GameRes_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trend) ProtoMessage() {}

func (x *Trend) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trend.ProtoReflect.Descriptor instead.
func (*Trend) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{7}
}

func (x *Trend) GetRoundInfoList() []*RoundInfo {
	if x != nil {
		return x.RoundInfoList
	}
	return nil
}

// 开奖资讯（通用格式定义，能符合未来新游戏的扩充）
type RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 期号
	RoundId string `protobuf:"bytes,1,opt,name=roundId,proto3" json:"roundId,omitempty"`
	// 牌面种类
	ElementType int32 `protobuf:"varint,2,opt,name=elementType,proto3" json:"elementType,omitempty"` // 1:扑克牌, 2:麻将牌, 3:天九牌, 4:骰子...
	// 表演资讯
	Performs           []*ActorPerform `protobuf:"bytes,3,rep,name=performs,proto3" json:"performs,omitempty"`
	RoundPerformResult []int32         `protobuf:"varint,5,rep,packed,name=roundPerformResult,proto3" json:"roundPerformResult,omitempty"` // 表演的全局資訊
}

func (x *RoundInfo) Reset() {
	*x = RoundInfo{}
	mi := &file_proto_data_GameRes_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInfo) ProtoMessage() {}

func (x *RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInfo.ProtoReflect.Descriptor instead.
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{8}
}

func (x *RoundInfo) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *RoundInfo) GetElementType() int32 {
	if x != nil {
		return x.ElementType
	}
	return 0
}

func (x *RoundInfo) GetPerforms() []*ActorPerform {
	if x != nil {
		return x.Performs
	}
	return nil
}

func (x *RoundInfo) GetRoundPerformResult() []int32 {
	if x != nil {
		return x.RoundPerformResult
	}
	return nil
}

type ActorPerform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 牌面
	Elements []int32 `protobuf:"varint,1,rep,packed,name=elements,proto3" json:"elements,omitempty"` // (根据elementType决定)
	// 牌型
	Patterns []int32 `protobuf:"varint,2,rep,packed,name=patterns,proto3" json:"patterns,omitempty"` // (根据miniGameId决定) 牛牛, 铁支
	// 结果
	PerformResult []int32 `protobuf:"varint,3,rep,packed,name=performResult,proto3" json:"performResult,omitempty"` // (根据miniGameId决定) 0:undefined, 1:胜, 2:败, 3:和
}

func (x *ActorPerform) Reset() {
	*x = ActorPerform{}
	mi := &file_proto_data_GameRes_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActorPerform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorPerform) ProtoMessage() {}

func (x *ActorPerform) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorPerform.ProtoReflect.Descriptor instead.
func (*ActorPerform) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{9}
}

func (x *ActorPerform) GetElements() []int32 {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *ActorPerform) GetPatterns() []int32 {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *ActorPerform) GetPerformResult() []int32 {
	if x != nil {
		return x.PerformResult
	}
	return nil
}

// 小游戏资讯 (MDM_GAME-C2S_ENTER_MINI_GAME => MDM_GAME-S2C_ENTER_MINI_GAME_INFO)
type EnterMiniGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 小游戏 id
	MiniGameId int32      `protobuf:"varint,1,opt,name=miniGameId,proto3" json:"miniGameId,omitempty"`
	RoundId    string     `protobuf:"bytes,2,opt,name=roundId,proto3" json:"roundId,omitempty"`
	AreaBets   []*AreaBet `protobuf:"bytes,4,rep,name=areaBets,proto3" json:"areaBets,omitempty"`     // 全部注区的下注信息(含自己)
	MyAreaBets []*AreaBet `protobuf:"bytes,5,rep,name=myAreaBets,proto3" json:"myAreaBets,omitempty"` // 我自己的下注信息
	// 当前所处阶段：1.下注 2.结算
	Stage int32 `protobuf:"varint,6,opt,name=stage,proto3" json:"stage,omitempty"`
	// 当前阶段剩余时间倒计时(ms)
	CountDown int32 `protobuf:"varint,7,opt,name=countDown,proto3" json:"countDown,omitempty"`
	// 第几局
	DeckRound int32 `protobuf:"varint,8,opt,name=deckRound,proto3" json:"deckRound,omitempty"`
	// 开奖纪录(若进场时为结算阶段, 则包含此局结果)
	Trend *Trend `protobuf:"bytes,9,opt,name=trend,proto3" json:"trend,omitempty"`
	// --- 結算階段時要給以下信息 --- //
	// 玩家自己押注输赢结果
	MySettleResult []*SettleResult `protobuf:"bytes,10,rep,name=mySettleResult,proto3" json:"mySettleResult,omitempty"`
	// 輸贏金額
	WinScore int32 `protobuf:"varint,11,opt,name=winScore,proto3" json:"winScore,omitempty"`
	// 获胜注区列表
	WinAreaCodes []int32 `protobuf:"varint,12,rep,packed,name=winAreaCodes,proto3" json:"winAreaCodes,omitempty"`
}

func (x *EnterMiniGameInfo) Reset() {
	*x = EnterMiniGameInfo{}
	mi := &file_proto_data_GameRes_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnterMiniGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterMiniGameInfo) ProtoMessage() {}

func (x *EnterMiniGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterMiniGameInfo.ProtoReflect.Descriptor instead.
func (*EnterMiniGameInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{10}
}

func (x *EnterMiniGameInfo) GetMiniGameId() int32 {
	if x != nil {
		return x.MiniGameId
	}
	return 0
}

func (x *EnterMiniGameInfo) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *EnterMiniGameInfo) GetAreaBets() []*AreaBet {
	if x != nil {
		return x.AreaBets
	}
	return nil
}

func (x *EnterMiniGameInfo) GetMyAreaBets() []*AreaBet {
	if x != nil {
		return x.MyAreaBets
	}
	return nil
}

func (x *EnterMiniGameInfo) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *EnterMiniGameInfo) GetCountDown() int32 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

func (x *EnterMiniGameInfo) GetDeckRound() int32 {
	if x != nil {
		return x.DeckRound
	}
	return 0
}

func (x *EnterMiniGameInfo) GetTrend() *Trend {
	if x != nil {
		return x.Trend
	}
	return nil
}

func (x *EnterMiniGameInfo) GetMySettleResult() []*SettleResult {
	if x != nil {
		return x.MySettleResult
	}
	return nil
}

func (x *EnterMiniGameInfo) GetWinScore() int32 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

func (x *EnterMiniGameInfo) GetWinAreaCodes() []int32 {
	if x != nil {
		return x.WinAreaCodes
	}
	return nil
}

// 注区资讯
type AreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode int32   `protobuf:"varint,1,opt,name=areaCode,proto3" json:"areaCode,omitempty"`  // 注区ID
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`           // 注区名称
	Types    []int32 `protobuf:"varint,3,rep,packed,name=types,proto3" json:"types,omitempty"` // 所属注区类别
	Odds     float32 `protobuf:"fixed32,5,opt,name=odds,proto3" json:"odds,omitempty"`         // 赔率
	MinLimit int32   `protobuf:"varint,6,opt,name=minLimit,proto3" json:"minLimit,omitempty"`  // 投注下限
	MaxLimit int32   `protobuf:"varint,7,opt,name=maxLimit,proto3" json:"maxLimit,omitempty"`  // 投注上限
}

func (x *AreaInfo) Reset() {
	*x = AreaInfo{}
	mi := &file_proto_data_GameRes_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfo) ProtoMessage() {}

func (x *AreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfo.ProtoReflect.Descriptor instead.
func (*AreaInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{11}
}

func (x *AreaInfo) GetAreaCode() int32 {
	if x != nil {
		return x.AreaCode
	}
	return 0
}

func (x *AreaInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AreaInfo) GetTypes() []int32 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *AreaInfo) GetOdds() float32 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *AreaInfo) GetMinLimit() int32 {
	if x != nil {
		return x.MinLimit
	}
	return 0
}

func (x *AreaInfo) GetMaxLimit() int32 {
	if x != nil {
		return x.MaxLimit
	}
	return 0
}

type AreaBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode  int32 `protobuf:"varint,1,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	BetScore  int32 `protobuf:"varint,2,opt,name=betScore,proto3" json:"betScore,omitempty"`
	UserCount int32 `protobuf:"varint,3,opt,name=userCount,proto3" json:"userCount,omitempty"` // 下注的人数
}

func (x *AreaBet) Reset() {
	*x = AreaBet{}
	mi := &file_proto_data_GameRes_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreaBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaBet) ProtoMessage() {}

func (x *AreaBet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaBet.ProtoReflect.Descriptor instead.
func (*AreaBet) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{12}
}

func (x *AreaBet) GetAreaCode() int32 {
	if x != nil {
		return x.AreaCode
	}
	return 0
}

func (x *AreaBet) GetBetScore() int32 {
	if x != nil {
		return x.BetScore
	}
	return 0
}

func (x *AreaBet) GetUserCount() int32 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

// 开始新的一轮
type BeginNewRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 小游戏 id
	MiniGameId int32 `protobuf:"varint,1,opt,name=miniGameId,proto3" json:"miniGameId,omitempty"`
	// 当前阶段剩余时间倒计时(ms)
	CountDown int32 `protobuf:"varint,2,opt,name=countDown,proto3" json:"countDown,omitempty"`
	// 期号
	RoundId string `protobuf:"bytes,3,opt,name=roundId,proto3" json:"roundId,omitempty"`
	// 第几局
	DeckRound int32 `protobuf:"varint,4,opt,name=deckRound,proto3" json:"deckRound,omitempty"`
}

func (x *BeginNewRound) Reset() {
	*x = BeginNewRound{}
	mi := &file_proto_data_GameRes_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginNewRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginNewRound) ProtoMessage() {}

func (x *BeginNewRound) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use beginNewRound.ProtoReflect.Descriptor instead.
func (*BeginNewRound) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{13}
}

func (x *BeginNewRound) GetMiniGameId() int32 {
	if x != nil {
		return x.MiniGameId
	}
	return 0
}

func (x *BeginNewRound) GetCountDown() int32 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

func (x *BeginNewRound) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *BeginNewRound) GetDeckRound() int32 {
	if x != nil {
		return x.DeckRound
	}
	return 0
}

// 下注结果
type MyMiniGameBetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 小游戏 id
	MiniGameId int32 `protobuf:"varint,1,opt,name=miniGameId,proto3" json:"miniGameId,omitempty"`
	// 押注资讯
	BetResultInfoList []*BetResultInfo `protobuf:"bytes,2,rep,name=betResultInfoList,proto3" json:"betResultInfoList,omitempty"`
}

func (x *MyMiniGameBetResult) Reset() {
	*x = MyMiniGameBetResult{}
	mi := &file_proto_data_GameRes_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MyMiniGameBetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyMiniGameBetResult) ProtoMessage() {}

func (x *MyMiniGameBetResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyMiniGameBetResult.ProtoReflect.Descriptor instead.
func (*MyMiniGameBetResult) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{14}
}

func (x *MyMiniGameBetResult) GetMiniGameId() int32 {
	if x != nil {
		return x.MiniGameId
	}
	return 0
}

func (x *MyMiniGameBetResult) GetBetResultInfoList() []*BetResultInfo {
	if x != nil {
		return x.BetResultInfoList
	}
	return nil
}

type BetResultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaBet *AreaBet `protobuf:"bytes,1,opt,name=areaBet,proto3" json:"areaBet,omitempty"`
	Result  int32    `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` // BetStatus
}

func (x *BetResultInfo) Reset() {
	*x = BetResultInfo{}
	mi := &file_proto_data_GameRes_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetResultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetResultInfo) ProtoMessage() {}

func (x *BetResultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetResultInfo.ProtoReflect.Descriptor instead.
func (*BetResultInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{15}
}

func (x *BetResultInfo) GetAreaBet() *AreaBet {
	if x != nil {
		return x.AreaBet
	}
	return nil
}

func (x *BetResultInfo) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

// 同步注区下注信息
type SyncAreaBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 小游戏 id
	MiniGameId int32      `protobuf:"varint,1,opt,name=miniGameId,proto3" json:"miniGameId,omitempty"`
	AreaBets   []*AreaBet `protobuf:"bytes,2,rep,name=areaBets,proto3" json:"areaBets,omitempty"`
}

func (x *SyncAreaBetInfo) Reset() {
	*x = SyncAreaBetInfo{}
	mi := &file_proto_data_GameRes_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAreaBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAreaBetInfo) ProtoMessage() {}

func (x *SyncAreaBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAreaBetInfo.ProtoReflect.Descriptor instead.
func (*SyncAreaBetInfo) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{16}
}

func (x *SyncAreaBetInfo) GetMiniGameId() int32 {
	if x != nil {
		return x.MiniGameId
	}
	return 0
}

func (x *SyncAreaBetInfo) GetAreaBets() []*AreaBet {
	if x != nil {
		return x.AreaBets
	}
	return nil
}

// 开始开牌
type BeginDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 小游戏 id
	MiniGameId int32 `protobuf:"varint,1,opt,name=miniGameId,proto3" json:"miniGameId,omitempty"`
	// 当前阶段剩余时间倒计时(ms)
	CountDown int32 `protobuf:"varint,2,opt,name=countDown,proto3" json:"countDown,omitempty"`
	// 期号
	RoundId string `protobuf:"bytes,3,opt,name=roundId,proto3" json:"roundId,omitempty"`
	// 开奖资讯
	RoundInfo *RoundInfo `protobuf:"bytes,4,opt,name=roundInfo,proto3" json:"roundInfo,omitempty"`
}

func (x *BeginDeal) Reset() {
	*x = BeginDeal{}
	mi := &file_proto_data_GameRes_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginDeal) ProtoMessage() {}

func (x *BeginDeal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginDeal.ProtoReflect.Descriptor instead.
func (*BeginDeal) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{17}
}

func (x *BeginDeal) GetMiniGameId() int32 {
	if x != nil {
		return x.MiniGameId
	}
	return 0
}

func (x *BeginDeal) GetCountDown() int32 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

func (x *BeginDeal) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *BeginDeal) GetRoundInfo() *RoundInfo {
	if x != nil {
		return x.RoundInfo
	}
	return nil
}

// 各小游结算
type BeginSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 小游戏 id
	MiniGameId int32 `protobuf:"varint,1,opt,name=miniGameId,proto3" json:"miniGameId,omitempty"`
	// 当前阶段剩余时间倒计时(ms)
	CountDown int32 `protobuf:"varint,2,opt,name=countDown,proto3" json:"countDown,omitempty"`
	// 玩家自己押注输赢结果
	MySettleResult []*SettleResult `protobuf:"bytes,4,rep,name=mySettleResult,proto3" json:"mySettleResult,omitempty"`
	// 輸贏金額
	WinScore int32 `protobuf:"varint,5,opt,name=winScore,proto3" json:"winScore,omitempty"`
	// 获胜注区列表
	WinAreaCodes []int32 `protobuf:"varint,6,rep,packed,name=winAreaCodes,proto3" json:"winAreaCodes,omitempty"`
}

func (x *BeginSettle) Reset() {
	*x = BeginSettle{}
	mi := &file_proto_data_GameRes_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginSettle) ProtoMessage() {}

func (x *BeginSettle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginSettle.ProtoReflect.Descriptor instead.
func (*BeginSettle) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{18}
}

func (x *BeginSettle) GetMiniGameId() int32 {
	if x != nil {
		return x.MiniGameId
	}
	return 0
}

func (x *BeginSettle) GetCountDown() int32 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

func (x *BeginSettle) GetMySettleResult() []*SettleResult {
	if x != nil {
		return x.MySettleResult
	}
	return nil
}

func (x *BeginSettle) GetWinScore() int32 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

func (x *BeginSettle) GetWinAreaCodes() []int32 {
	if x != nil {
		return x.WinAreaCodes
	}
	return nil
}

type SettleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode int32 `protobuf:"varint,1,opt,name=areaCode,proto3" json:"areaCode,omitempty"` // 注区ID
	BetScore int32 `protobuf:"varint,2,opt,name=betScore,proto3" json:"betScore,omitempty"` // 投注金額
	WinScore int32 `protobuf:"varint,3,opt,name=winScore,proto3" json:"winScore,omitempty"` // 輸贏金額(0不傳)
}

func (x *SettleResult) Reset() {
	*x = SettleResult{}
	mi := &file_proto_data_GameRes_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SettleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleResult) ProtoMessage() {}

func (x *SettleResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleResult.ProtoReflect.Descriptor instead.
func (*SettleResult) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{19}
}

func (x *SettleResult) GetAreaCode() int32 {
	if x != nil {
		return x.AreaCode
	}
	return 0
}

func (x *SettleResult) GetBetScore() int32 {
	if x != nil {
		return x.BetScore
	}
	return 0
}

func (x *SettleResult) GetWinScore() int32 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

// 离开group
type LeaveGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *LeaveGroup) Reset() {
	*x = LeaveGroup{}
	mi := &file_proto_data_GameRes_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveGroup) ProtoMessage() {}

func (x *LeaveGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveGroup.ProtoReflect.Descriptor instead.
func (*LeaveGroup) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{20}
}

func (x *LeaveGroup) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// 离开小游戏
type LeaveMiniGames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiniGameIds []int32 `protobuf:"varint,1,rep,packed,name=miniGameIds,proto3" json:"miniGameIds,omitempty"` //
}

func (x *LeaveMiniGames) Reset() {
	*x = LeaveMiniGames{}
	mi := &file_proto_data_GameRes_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveMiniGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveMiniGames) ProtoMessage() {}

func (x *LeaveMiniGames) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveMiniGames.ProtoReflect.Descriptor instead.
func (*LeaveMiniGames) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{21}
}

func (x *LeaveMiniGames) GetMiniGameIds() []int32 {
	if x != nil {
		return x.MiniGameIds
	}
	return nil
}

// 通知前端清除開獎紀錄
type ClearTrends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiniGameIds []int32 `protobuf:"varint,1,rep,packed,name=miniGameIds,proto3" json:"miniGameIds,omitempty"`
}

func (x *ClearTrends) Reset() {
	*x = ClearTrends{}
	mi := &file_proto_data_GameRes_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearTrends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearTrends) ProtoMessage() {}

func (x *ClearTrends) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearTrends.ProtoReflect.Descriptor instead.
func (*ClearTrends) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{22}
}

func (x *ClearTrends) GetMiniGameIds() []int32 {
	if x != nil {
		return x.MiniGameIds
	}
	return nil
}

// 刷新玩家金錢
type RefreshUserScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score *int64 `protobuf:"varint,1,opt,name=score,proto3,oneof" json:"score,omitempty"`
}

func (x *RefreshUserScore) Reset() {
	*x = RefreshUserScore{}
	mi := &file_proto_data_GameRes_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshUserScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshUserScore) ProtoMessage() {}

func (x *RefreshUserScore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshUserScore.ProtoReflect.Descriptor instead.
func (*RefreshUserScore) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{23}
}

func (x *RefreshUserScore) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type RefreshGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameConfigs []*GameConfig `protobuf:"bytes,1,rep,name=gameConfigs,proto3" json:"gameConfigs,omitempty"`
}

func (x *RefreshGameConfig) Reset() {
	*x = RefreshGameConfig{}
	mi := &file_proto_data_GameRes_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshGameConfig) ProtoMessage() {}

func (x *RefreshGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshGameConfig.ProtoReflect.Descriptor instead.
func (*RefreshGameConfig) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{24}
}

func (x *RefreshGameConfig) GetGameConfigs() []*GameConfig {
	if x != nil {
		return x.GameConfigs
	}
	return nil
}

type RefreshWaliGameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaligameConfigs []*WaliGameConfig `protobuf:"bytes,1,rep,name=waligameConfigs,proto3" json:"waligameConfigs,omitempty"`
}

func (x *RefreshWaliGameConfig) Reset() {
	*x = RefreshWaliGameConfig{}
	mi := &file_proto_data_GameRes_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshWaliGameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshWaliGameConfig) ProtoMessage() {}

func (x *RefreshWaliGameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshWaliGameConfig.ProtoReflect.Descriptor instead.
func (*RefreshWaliGameConfig) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{25}
}

func (x *RefreshWaliGameConfig) GetWaligameConfigs() []*WaliGameConfig {
	if x != nil {
		return x.WaligameConfigs
	}
	return nil
}

type RefreshWaliGamePlayerCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerCounts []int32 `protobuf:"varint,1,rep,packed,name=playerCounts,proto3" json:"playerCounts,omitempty"`
}

func (x *RefreshWaliGamePlayerCount) Reset() {
	*x = RefreshWaliGamePlayerCount{}
	mi := &file_proto_data_GameRes_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshWaliGamePlayerCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshWaliGamePlayerCount) ProtoMessage() {}

func (x *RefreshWaliGamePlayerCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_data_GameRes_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshWaliGamePlayerCount.ProtoReflect.Descriptor instead.
func (*RefreshWaliGamePlayerCount) Descriptor() ([]byte, []int) {
	return file_proto_data_GameRes_proto_rawDescGZIP(), []int{26}
}

func (x *RefreshWaliGamePlayerCount) GetPlayerCounts() []int32 {
	if x != nil {
		return x.PlayerCounts
	}
	return nil
}

var File_proto_data_GameRes_proto protoreflect.FileDescriptor

var file_proto_data_GameRes_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x73, 0x65,
	0x6c, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x6c, 0x69, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x77, 0x61, 0x6c, 0x69, 0x67, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x38, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x7f, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x51, 0x0a, 0x0e, 0x62, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x62, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x42, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x66, 0x0a, 0x0e, 0x57, 0x61, 0x6c, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72,
	0x65, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x11,
	0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x05, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12,
	0x4b, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x72, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbd, 0x01, 0x0a,
	0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x08, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6c, 0x0a, 0x0c,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf0, 0x03, 0x0a, 0x11, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x42, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65,
	0x74, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x6d,
	0x79, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e,
	0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x65,
	0x61, 0x42, 0x65, 0x74, 0x52, 0x0a, 0x6d, 0x79, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x54,
	0x72, 0x65, 0x6e, 0x64, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x0e, 0x6d,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6d,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x77, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x77, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x9c, 0x01,
	0x0a, 0x08, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6f, 0x64, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5f, 0x0a, 0x07,
	0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x01,
	0x0a, 0x0d, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6b, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6b,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x4d, 0x79, 0x4d, 0x69, 0x6e, 0x69,
	0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x11, 0x62, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x62, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x0d, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x42,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x52, 0x07, 0x61,
	0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x72,
	0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73,
	0x2e, 0x41, 0x72, 0x65, 0x61, 0x42, 0x65, 0x74, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x42, 0x65,
	0x74, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x09, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdd, 0x01,
	0x0a, 0x0b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x50, 0x0a, 0x0e, 0x6d,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6d,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x77, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x77, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x77, 0x69, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x62, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x65, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x26, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x0e, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x22, 0x2f, 0x0a,
	0x0b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x22, 0x37,
	0x0a, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x5d, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x6d, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x57, 0x61, 0x6c, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x54, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x2e, 0x79, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x6c, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x77, 0x61, 0x6c, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x40, 0x0a, 0x1a, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x57, 0x61, 0x6c, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_data_GameRes_proto_rawDescOnce sync.Once
	file_proto_data_GameRes_proto_rawDescData = file_proto_data_GameRes_proto_rawDesc
)

func file_proto_data_GameRes_proto_rawDescGZIP() []byte {
	file_proto_data_GameRes_proto_rawDescOnce.Do(func() {
		file_proto_data_GameRes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_data_GameRes_proto_rawDescData)
	})
	return file_proto_data_GameRes_proto_rawDescData
}

var file_proto_data_GameRes_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_proto_data_GameRes_proto_goTypes = []any{
	(*EnterInfo)(nil),                  // 0: game.mod.proc.yf.proto.res.EnterInfo
	(*UserData)(nil),                   // 1: game.mod.proc.yf.proto.res.UserData
	(*GameConfig)(nil),                 // 2: game.mod.proc.yf.proto.res.GameConfig
	(*BetAreaConfig)(nil),              // 3: game.mod.proc.yf.proto.res.BetAreaConfig
	(*WaliGameConfig)(nil),             // 4: game.mod.proc.yf.proto.res.WaliGameConfig
	(*GroupInfo)(nil),                  // 5: game.mod.proc.yf.proto.res.GroupInfo
	(*MiniGameBasicInfo)(nil),          // 6: game.mod.proc.yf.proto.res.MiniGameBasicInfo
	(*Trend)(nil),                      // 7: game.mod.proc.yf.proto.res.Trend
	(*RoundInfo)(nil),                  // 8: game.mod.proc.yf.proto.res.RoundInfo
	(*ActorPerform)(nil),               // 9: game.mod.proc.yf.proto.res.ActorPerform
	(*EnterMiniGameInfo)(nil),          // 10: game.mod.proc.yf.proto.res.EnterMiniGameInfo
	(*AreaInfo)(nil),                   // 11: game.mod.proc.yf.proto.res.AreaInfo
	(*AreaBet)(nil),                    // 12: game.mod.proc.yf.proto.res.AreaBet
	(*BeginNewRound)(nil),              // 13: game.mod.proc.yf.proto.res.beginNewRound
	(*MyMiniGameBetResult)(nil),        // 14: game.mod.proc.yf.proto.res.MyMiniGameBetResult
	(*BetResultInfo)(nil),              // 15: game.mod.proc.yf.proto.res.BetResultInfo
	(*SyncAreaBetInfo)(nil),            // 16: game.mod.proc.yf.proto.res.SyncAreaBetInfo
	(*BeginDeal)(nil),                  // 17: game.mod.proc.yf.proto.res.BeginDeal
	(*BeginSettle)(nil),                // 18: game.mod.proc.yf.proto.res.BeginSettle
	(*SettleResult)(nil),               // 19: game.mod.proc.yf.proto.res.SettleResult
	(*LeaveGroup)(nil),                 // 20: game.mod.proc.yf.proto.res.LeaveGroup
	(*LeaveMiniGames)(nil),             // 21: game.mod.proc.yf.proto.res.LeaveMiniGames
	(*ClearTrends)(nil),                // 22: game.mod.proc.yf.proto.res.ClearTrends
	(*RefreshUserScore)(nil),           // 23: game.mod.proc.yf.proto.res.RefreshUserScore
	(*RefreshGameConfig)(nil),          // 24: game.mod.proc.yf.proto.res.RefreshGameConfig
	(*RefreshWaliGameConfig)(nil),      // 25: game.mod.proc.yf.proto.res.RefreshWaliGameConfig
	(*RefreshWaliGamePlayerCount)(nil), // 26: game.mod.proc.yf.proto.res.RefreshWaliGamePlayerCount
}
var file_proto_data_GameRes_proto_depIdxs = []int32{
	1,  // 0: game.mod.proc.yf.proto.res.EnterInfo.self:type_name -> game.mod.proc.yf.proto.res.UserData
	2,  // 1: game.mod.proc.yf.proto.res.EnterInfo.gameConfigs:type_name -> game.mod.proc.yf.proto.res.GameConfig
	4,  // 2: game.mod.proc.yf.proto.res.EnterInfo.waligameConfigs:type_name -> game.mod.proc.yf.proto.res.WaliGameConfig
	3,  // 3: game.mod.proc.yf.proto.res.GameConfig.betAreaConfigs:type_name -> game.mod.proc.yf.proto.res.BetAreaConfig
	6,  // 4: game.mod.proc.yf.proto.res.GroupInfo.miniGameBasicInfoList:type_name -> game.mod.proc.yf.proto.res.MiniGameBasicInfo
	8,  // 5: game.mod.proc.yf.proto.res.MiniGameBasicInfo.lastRoundInfo:type_name -> game.mod.proc.yf.proto.res.RoundInfo
	8,  // 6: game.mod.proc.yf.proto.res.Trend.roundInfoList:type_name -> game.mod.proc.yf.proto.res.RoundInfo
	9,  // 7: game.mod.proc.yf.proto.res.RoundInfo.performs:type_name -> game.mod.proc.yf.proto.res.ActorPerform
	12, // 8: game.mod.proc.yf.proto.res.EnterMiniGameInfo.areaBets:type_name -> game.mod.proc.yf.proto.res.AreaBet
	12, // 9: game.mod.proc.yf.proto.res.EnterMiniGameInfo.myAreaBets:type_name -> game.mod.proc.yf.proto.res.AreaBet
	7,  // 10: game.mod.proc.yf.proto.res.EnterMiniGameInfo.trend:type_name -> game.mod.proc.yf.proto.res.Trend
	19, // 11: game.mod.proc.yf.proto.res.EnterMiniGameInfo.mySettleResult:type_name -> game.mod.proc.yf.proto.res.SettleResult
	15, // 12: game.mod.proc.yf.proto.res.MyMiniGameBetResult.betResultInfoList:type_name -> game.mod.proc.yf.proto.res.BetResultInfo
	12, // 13: game.mod.proc.yf.proto.res.BetResultInfo.areaBet:type_name -> game.mod.proc.yf.proto.res.AreaBet
	12, // 14: game.mod.proc.yf.proto.res.SyncAreaBetInfo.areaBets:type_name -> game.mod.proc.yf.proto.res.AreaBet
	8,  // 15: game.mod.proc.yf.proto.res.BeginDeal.roundInfo:type_name -> game.mod.proc.yf.proto.res.RoundInfo
	19, // 16: game.mod.proc.yf.proto.res.BeginSettle.mySettleResult:type_name -> game.mod.proc.yf.proto.res.SettleResult
	2,  // 17: game.mod.proc.yf.proto.res.RefreshGameConfig.gameConfigs:type_name -> game.mod.proc.yf.proto.res.GameConfig
	4,  // 18: game.mod.proc.yf.proto.res.RefreshWaliGameConfig.waligameConfigs:type_name -> game.mod.proc.yf.proto.res.WaliGameConfig
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_data_GameRes_proto_init() }
func file_proto_data_GameRes_proto_init() {
	if File_proto_data_GameRes_proto != nil {
		return
	}
	file_proto_data_GameRes_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_data_GameRes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_data_GameRes_proto_goTypes,
		DependencyIndexes: file_proto_data_GameRes_proto_depIdxs,
		MessageInfos:      file_proto_data_GameRes_proto_msgTypes,
	}.Build()
	File_proto_data_GameRes_proto = out.File
	file_proto_data_GameRes_proto_rawDesc = nil
	file_proto_data_GameRes_proto_goTypes = nil
	file_proto_data_GameRes_proto_depIdxs = nil
}
